// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  name          String?
  password      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userMovies    UserMovie[]
  userTVShows   UserTVShow[]
  episodeStatus UserEpisode[]
  sessions      Session[]
}

model Genre {
  id        Int      @id // This is the TMDb genre ID
  name      String
  movies    MovieGenre[]
  tvShows   TVShowGenre[]
  createdAt DateTime @default(now())
}

model Person {
  id                 Int      @id // This is the TMDb person ID
  name               String
  profilePath        String?
  biography          String?  @db.Text
  birthday           DateTime?
  deathday           DateTime?
  placeOfBirth       String?
  popularity         Float?
  knownForDepartment String?
  alsoKnownAs        String[] // JSON array
  homepage           String?
  imdbId             String?
  cachedAt           DateTime @default(now())
  createdAt          DateTime @default(now())

  castRoles          Cast[]
  crewRoles          Crew[]
}

model Movie {
  id                  Int          @id @default(autoincrement())
  tmdbId              Int          @unique
  title               String
  overview            String?      @db.Text
  posterPath          String?
  backdropPath        String?
  releaseDate         DateTime?    @db.Date
  runtime             Int?
  voteAverage         Float?
  voteCount           Int?
  budget              BigInt?
  revenue             BigInt?
  tagline             String?
  homepage            String?
  imdbId              String?
  originalLanguage    String?
  originalTitle       String?
  popularity          Float?
  status              String?
  cachedAt            DateTime     @default(now())
  createdAt           DateTime     @default(now())

  // Relations
  userMovies          UserMovie[]
  genres              MovieGenre[]
  videos              Video[]
  cast                Cast[]
  crew                Crew[]
  productionCompanies ProductionCompany[]
  productionCountries ProductionCountry[]
  spokenLanguages     SpokenLanguage[]

  @@index([tmdbId])
  @@index([title])
  @@index([imdbId])
}

model MovieGenre {
  id        Int      @id @default(autoincrement())
  movieId   Int
  genreId   Int
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([movieId, genreId])
  @@index([movieId])
  @@index([genreId])
}

model Video {
  id           String   @id @default(cuid())
  movieId      Int
  key          String   // YouTube/Vimeo key
  name         String
  site         String   // YouTube, Vimeo, etc
  size         Int?     // 360, 480, 720, 1080
  type         String   // Trailer, Teaser, Clip, Featurette, etc
  official     Boolean  @default(false)
  publishedAt  DateTime?
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
}

model Cast {
  id           Int      @id @default(autoincrement())
  movieId      Int
  personId     Int      // TMDb person ID
  character    String?
  order        Int      @default(0)
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  person       Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@unique([movieId, personId, character])
  @@index([movieId])
  @@index([personId])
}

model Crew {
  id           Int      @id @default(autoincrement())
  movieId      Int
  personId     Int      // TMDb person ID
  job          String
  department   String
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  person       Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@unique([movieId, personId, job])
  @@index([movieId])
  @@index([personId])
}

model ProductionCompany {
  id           Int      @id @default(autoincrement())
  movieId      Int
  companyId    Int      // TMDb company ID
  name         String
  logoPath     String?
  originCountry String?
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, companyId])
  @@index([movieId])
}

model ProductionCountry {
  id           Int      @id @default(autoincrement())
  movieId      Int
  iso31661     String   // Country code
  name         String
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, iso31661])
  @@index([movieId])
}

model SpokenLanguage {
  id           Int      @id @default(autoincrement())
  movieId      Int
  iso6391      String   // Language code
  name         String
  englishName  String?
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, iso6391])
  @@index([movieId])
}

model UserMovie {
  id            Int          @id @default(autoincrement())
  userId        Int
  movieId       Int
  status        String       // 'watchlist' | 'watched'
  watchedAt     DateTime?
  rating        Int?
  comment       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie         Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@index([userId, status])
  @@index([status])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// TV Show Models
model TVShow {
  id                  Int           @id @default(autoincrement())
  tmdbId              Int           @unique
  name                String
  originalName        String?
  overview            String?       @db.Text
  posterPath          String?
  backdropPath        String?
  firstAirDate        DateTime?     @db.Date
  lastAirDate         DateTime?     @db.Date
  episodeRunTime      Int[]         // Array of typical episode runtimes
  voteAverage         Float?
  voteCount           Int?
  numberOfSeasons     Int?
  numberOfEpisodes    Int?
  inProduction        Boolean       @default(false)
  status              String?       // Returning Series, Ended, Canceled, etc
  type                String?       // Scripted, Documentary, News, etc
  homepage            String?
  originalLanguage    String?
  popularity          Float?
  tagline             String?
  cachedAt            DateTime      @default(now())
  createdAt           DateTime      @default(now())

  // Relations
  userTVShows         UserTVShow[]
  genres              TVShowGenre[]
  seasons             Season[]
  episodes            Episode[]
  networks            Network[]
  productionCompanies TVShowProductionCompany[]
  createdBy           Creator[]

  @@index([tmdbId])
  @@index([name])
}

model TVShowGenre {
  id        Int      @id @default(autoincrement())
  tvShowId  Int
  genreId   Int
  tvShow    TVShow   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([tvShowId, genreId])
  @@index([tvShowId])
  @@index([genreId])
}

model Season {
  id           Int       @id @default(autoincrement())
  tvShowId     Int
  seasonNumber Int
  name         String
  overview     String?   @db.Text
  posterPath   String?
  airDate      DateTime? @db.Date
  episodeCount Int?
  tvShow       TVShow    @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  episodes     Episode[]

  @@unique([tvShowId, seasonNumber])
  @@index([tvShowId])
}

model Episode {
  id              Int           @id @default(autoincrement())
  tvShowId        Int
  seasonId        Int?
  episodeNumber   Int
  seasonNumber    Int
  name            String
  overview        String?       @db.Text
  stillPath       String?
  airDate         DateTime?     @db.Date
  runtime         Int?
  voteAverage     Float?
  voteCount       Int?
  productionCode  String?
  tvShow          TVShow        @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  season          Season?       @relation(fields: [seasonId], references: [id], onDelete: SetNull)
  userEpisodes    UserEpisode[]

  @@unique([tvShowId, seasonNumber, episodeNumber])
  @@index([tvShowId])
  @@index([seasonId])
}

model Network {
  id           Int      @id @default(autoincrement())
  tvShowId     Int
  networkId    Int      // TMDb network ID
  name         String
  logoPath     String?
  originCountry String?
  tvShow       TVShow   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)

  @@unique([tvShowId, networkId])
  @@index([tvShowId])
}

model TVShowProductionCompany {
  id            Int      @id @default(autoincrement())
  tvShowId      Int
  companyId     Int      // TMDb company ID
  name          String
  logoPath      String?
  originCountry String?
  tvShow        TVShow   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)

  @@unique([tvShowId, companyId])
  @@index([tvShowId])
}

model Creator {
  id           Int      @id @default(autoincrement())
  tvShowId     Int
  personId     Int      // TMDb person ID
  name         String
  profilePath  String?
  tvShow       TVShow   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)

  @@unique([tvShowId, personId])
  @@index([tvShowId])
}

model UserTVShow {
  id            Int          @id @default(autoincrement())
  userId        Int
  tvShowId      Int
  status        String       // 'watchlist' | 'watching' | 'completed' | 'on_hold' | 'dropped'
  startedAt     DateTime?
  completedAt   DateTime?
  rating        Int?
  comment       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tvShow        TVShow       @relation(fields: [tvShowId], references: [id], onDelete: Cascade)

  @@unique([userId, tvShowId])
  @@index([userId, status])
  @@index([status])
}

model UserEpisode {
  id            Int          @id @default(autoincrement())
  userId        Int
  episodeId     Int
  status        String       // 'watched' | 'planned'
  watchedAt     DateTime?
  rating        Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  episode       Episode      @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@unique([userId, episodeId])
  @@index([userId])
  @@index([episodeId])
}
